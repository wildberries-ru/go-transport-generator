// Package {{.PkgName}} ...
// CODE GENERATED AUTOMATICALLY
// DO NOT EDIT
package {{.PkgName}}
{{$methods := .HTTPMethods}}
import (
	"context"
	"encoding/json"
	"net/http"
	"net/url"
	"os"
	"strings"

	"github.com/pkg/errors"
	"github.com/buaazp/fasthttprouter"
	"github.com/valyala/fasthttp"
)

const (
	{{range .Iface.Methods}}
	{{$ct := index $methods .Name}}httpMethod{{.Name}} = "{{$ct.Method}}"
	uriPathClient{{.Name}} = "{{$ct.ClientURIPath}}"{{end}}
)

type errorProcessor interface {
	Decode(r *fasthttp.Response) error
}

// Config ...
type Config struct {
	ServerURL           string
	MaxConns            *int
	MaxConnDuration     *time.Duration
	MaxIdleConnDuration *time.Duration
	ReadBufferSize      *int
	WriteBufferSize     *int
	ReadTimeout         *time.Duration
	WriteTimeout        *time.Duration
	MaxResponseBodySize *int
}

// New ...
func New(
	config Config,
	errorProcessor errorProcessor,
	options map[interface{}]Option,
) (client {{ .Iface.Name }}, err error) {
	parsedServerURL, err := url.Parse(config.ServerURL)
	if err != nil {
		err = errors.Wrap(err, "failed to parse server url")
		return
	}
	{{range .Iface.Methods}}transport{{.Name}} := New{{.Name}}Transport(
		errorProcessor,
		parsedServerURL.Scheme+"://"+parsedServerURL.Host+parsedServerURL.Path+uriPathClient{{.Name}},
		httpMethod{{.Name}},
	)
	{{end}}

	cli := fasthttp.HostClient{
		Addr: parsedServerURL.Host,
	}
	if config.MaxConns != nil {
		cli.MaxConns = *config.MaxConns
	}
	if config.MaxConnDuration != nil {
		cli.MaxConnDuration = *config.MaxConnDuration
	}
	if config.MaxIdleConnDuration != nil {
		cli.MaxIdleConnDuration = *config.MaxIdleConnDuration
	}
	if config.ReadBufferSize != nil {
		cli.ReadBufferSize = *config.ReadBufferSize
	}
	if config.WriteBufferSize != nil {
		cli.WriteBufferSize = *config.WriteBufferSize
	}
	if config.ReadTimeout != nil {
		cli.ReadTimeout = *config.ReadTimeout
	}
	if config.WriteTimeout != nil {
		cli.WriteTimeout = *config.WriteTimeout
	}
	if config.MaxResponseBodySize != nil {
		cli.MaxResponseBodySize = *config.MaxResponseBodySize
	}
	{{if .IsTLSClient}}cli.IsTLS = true{{if .IsInsecureTLS}}
	cli.TLSConfig = &tls.Config{InsecureSkipVerify: true}{{end}}{{end}}

	client = NewClient(
		&cli,
		{{range .Iface.Methods}}transport{{.Name}},
		{{end}}options,
	)
	return
}