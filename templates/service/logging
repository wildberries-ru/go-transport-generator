// Package {{.PkgName}} ...
// CODE GENERATED AUTOMATICALLY
// DO NOT EDIT
package {{.PkgName}}

import (
	"context"
	"time"

	"github.com/wildberries-ru/go-transport-generator/log/logger"
)

// loggingMiddleware wraps Service and logs request information to the provided logger
type loggingMiddleware struct {
	logger logger.Logger
	svc    {{ .Iface.Name }}
}
{{$methods := .HTTPMethods}}
{{range .Iface.Methods -}}
	{{$method := index $methods .Name}}
	// {{.Name}} ...
	func (s *loggingMiddleware) {{.Name}}({{joinFullVariables .Args ","}}) ({{joinFullVariables .Results ","}}) {
		defer func(begin time.Time) {
			lg := s.logger.WithError(err).WithFields(
				map[string]interface{} {
					{{$args := popFirst .Args -}}
					{{range $arg := $args -}}
						{{if notin $method.LogIgnores $arg.Name}}"{{$arg.Name}}": {{$arg.Name}},{{end}}
					{{end -}}
					{{$args := popLast .Results -}}
					{{range $arg := $args -}}
						{{if notin $method.LogIgnores $arg.Name}}"{{$arg.Name}}": {{$arg.Name}},{{end}}
					{{end -}}
					"elapsed": time.Since(begin),
				},
			)
			if err == nil {
				lg.Debug("{{.Name}}")
			} else {
				lg.Error("{{.Name}}")
			}
		}(time.Now())
		return s.svc.{{.Name}}({{joinVariableNamesWithEllipsis .Args ","}})
	}
{{end}}

// NewLoggingMiddleware ...
func NewLoggingMiddleware(logger logger.Logger, svc {{ .Iface.Name }}) {{ .Iface.Name }} {
	return &loggingMiddleware{
		logger: logger,
		svc:    svc,
	}
}