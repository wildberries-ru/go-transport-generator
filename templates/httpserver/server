// Package {{.PkgName}} ...
// CODE GENERATED AUTOMATICALLY
// DO NOT EDIT
package {{.PkgName}}

import (
	"context"

	"github.com/valyala/fasthttp"

	{{range $i, $k := .Imports}}
    {{$k}}
	{{end}}
)

type service interface {
{{range .Iface.Methods}}
	{{.Name}}({{joinFullVariables .Args ","}}) ({{joinFullVariables .Results ","}}){{end}}
}

{{range .Iface.Methods}}
type {{low .Name}} struct {
	transport      {{.Name}}Transport
	service        service
	errorProcessor errorProcessor
}

// ServeHTTP implements http.Handler.
func (s *{{low .Name}}) ServeHTTP(ctx *fasthttp.RequestCtx) {
	var (
		{{$args := popFirst .Args -}}
		{{range $i, $arg := $args -}}
			{{$arg.String}}
		{{end -}}
		{{$args := popLast .Results -}}
		{{range $i, $arg := $args -}}
			{{$arg.String}}
		{{end -}}
		err error
	)
	{{$args := popFirst .Args -}}
	{{joinVariableNames $args "," "err"}} = s.transport.DecodeRequest(ctx, &ctx.Request)
	if err != nil {
		s.errorProcessor.Encode(ctx, &ctx.Response, err)
		return
	}

	{{joinVariableNames .Results ","}} = s.service.{{.Name}}({{joinVariableNames .Args ","}})
	if err != nil {
		s.errorProcessor.Encode(ctx, &ctx.Response, err)
		return
	}

	{{ $args := popLast .Results -}}
	if err = s.transport.EncodeResponse(ctx, &ctx.Response, {{joinVariableNames $args ","}}); err != nil {
		s.errorProcessor.Encode(ctx, &ctx.Response, err)
		return
	}
}

// New{{.Name}} the server creator
func New{{.Name}}(transport {{.Name}}Transport, service service, errorProcessor errorProcessor) fasthttp.RequestHandler {
	ls := {{low .Name}}{
		transport:      transport,
		service:        service,
		errorProcessor: errorProcessor,
	}
	return ls.ServeHTTP
}{{end}}
